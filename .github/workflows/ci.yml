name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest-cov

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 app/ backend/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 app/ backend/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type checking with mypy
      run: |
        pip install mypy
        mypy app/ backend/ --ignore-missing-imports

    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=app --cov=backend --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety

    - name: Run Bandit Security Linter
      run: |
        bandit -r app/ backend/ -f json -o bandit-report.json || true

    - name: Run Safety Check
      run: |
        safety check --json --output safety-report.json || true

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build Docker image
      run: |
        docker build -t nutrition-ai:latest .

    - name: Test Docker image
      run: |
        docker run --rm nutrition-ai:latest python -c "import app.main; print('Docker build successful')"

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deployment to staging would happen here"
        # Add your deployment commands here

  ai-pipeline-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test AI pipeline components
      run: |
        # Test data ingestion
        python backend/ai/fetch_openfoodfacts.py --seed "apple,banana" || true
        
        # Test FAISS index building
        python scripts/build_faiss_index.py || true
        
        # Test Random Forest training
        python backend/ai/train_rf.py --jsonl data/nutrition_facts.jsonl || true

    - name: Test API endpoints
      run: |
        # Start the API server in background
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/ai/health/ || exit 1
        
        # Test nutrition facts endpoint
        curl -f "http://localhost:8000/ai/get-nutrition-facts/?q=apple&k=1" || exit 1
        
        # Test classification endpoint
        curl -f -X POST "http://localhost:8000/ai/classify-food/" \
          -H "Content-Type: application/json" \
          -d '{"user_id": 1, "food_name": "apple", "quantity_g": 100}' || exit 1

  flutter-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.16.0'

    - name: Install dependencies
      run: |
        cd nutrition_app
        flutter pub get

    - name: Analyze Flutter code
      run: |
        cd nutrition_app
        flutter analyze

    - name: Test Flutter app
      run: |
        cd nutrition_app
        flutter test

    - name: Build Flutter app
      run: |
        cd nutrition_app
        flutter build apk --debug

